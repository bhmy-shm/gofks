// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: cascade.rpcFlag

package cascade

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CascadeClient_LowerCreate_FullMethodName    = "/cascade.CascadeClient/LowerCreate"
	CascadeClient_LowerSearch_FullMethodName    = "/cascade.CascadeClient/LowerSearch"
	CascadeClient_LowerUpdate_FullMethodName    = "/cascade.CascadeClient/LowerUpdate"
	CascadeClient_LowerDel_FullMethodName       = "/cascade.CascadeClient/LowerDel"
	CascadeClient_LowerGetInfo_FullMethodName   = "/cascade.CascadeClient/LowerGetInfo"
	CascadeClient_SuperiorGet_FullMethodName    = "/cascade.CascadeClient/SuperiorGet"
	CascadeClient_SuperiorSet_FullMethodName    = "/cascade.CascadeClient/SuperiorSet"
	CascadeClient_SyncTime_FullMethodName       = "/cascade.CascadeClient/SyncTime"
	CascadeClient_HeartBeat_FullMethodName      = "/cascade.CascadeClient/HeartBeat"
	CascadeClient_CallCreate_FullMethodName     = "/cascade.CascadeClient/CallCreate"
	CascadeClient_CallModify_FullMethodName     = "/cascade.CascadeClient/CallModify"
	CascadeClient_CallDelete_FullMethodName     = "/cascade.CascadeClient/CallDelete"
	CascadeClient_CallGroupCall_FullMethodName  = "/cascade.CascadeClient/CallGroupCall"
	CascadeClient_CallSetMember_FullMethodName  = "/cascade.CascadeClient/CallSetMember"
	CascadeClient_CallHangupUser_FullMethodName = "/cascade.CascadeClient/CallHangupUser"
)

// CascadeClientClient is the client API for CascadeClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CascadeClientClient interface {
	// 上下级级联配置
	LowerCreate(ctx context.Context, in *ReqLowerCreate, opts ...grpc.CallOption) (*RespLowerCreate, error)
	LowerSearch(ctx context.Context, in *ReqLowerSearch, opts ...grpc.CallOption) (*RespLowerSearch, error)
	LowerUpdate(ctx context.Context, in *ReqLowerUpdate, opts ...grpc.CallOption) (*RespLowerUpdate, error)
	LowerDel(ctx context.Context, in *ReqLowerDel, opts ...grpc.CallOption) (*RespLowerDel, error)
	LowerGetInfo(ctx context.Context, in *ReqLowerGetInfo, opts ...grpc.CallOption) (*RespLowerGetInfo, error)
	SuperiorGet(ctx context.Context, in *ReqSuperiorGet, opts ...grpc.CallOption) (*RespSuperiorGet, error)
	SuperiorSet(ctx context.Context, in *ReqSuperiorSet, opts ...grpc.CallOption) (*RespSuperiorSet, error)
	// 其它操作
	SyncTime(ctx context.Context, in *ReqSyncTime, opts ...grpc.CallOption) (*RespSyncTime, error)
	HeartBeat(ctx context.Context, in *ReqHeartBeat, opts ...grpc.CallOption) (*RespHeartBeat, error)
	// 网关操作
	CallCreate(ctx context.Context, in *ReqCgwCallCreate, opts ...grpc.CallOption) (*RespCgwCallCreate, error)
	CallModify(ctx context.Context, in *ReqCgwCallModify, opts ...grpc.CallOption) (*RespCgwCallModify, error)
	CallDelete(ctx context.Context, in *ReqCgwCallDelete, opts ...grpc.CallOption) (*RespCgwCallDelete, error)
	CallGroupCall(ctx context.Context, in *ReqCgwCallGroupCall, opts ...grpc.CallOption) (*RespCgwCallGroupCall, error)
	CallSetMember(ctx context.Context, in *ReqCgwCallSetMember, opts ...grpc.CallOption) (*RespCgwCallSetMember, error)
	CallHangupUser(ctx context.Context, in *ReqCgwCallHangupUser, opts ...grpc.CallOption) (*RespCgwCallHangupUser, error)
}

type cascadeClientClient struct {
	cc grpc.ClientConnInterface
}

func NewCascadeClientClient(cc grpc.ClientConnInterface) CascadeClientClient {
	return &cascadeClientClient{cc}
}

func (c *cascadeClientClient) LowerCreate(ctx context.Context, in *ReqLowerCreate, opts ...grpc.CallOption) (*RespLowerCreate, error) {
	out := new(RespLowerCreate)
	err := c.cc.Invoke(ctx, CascadeClient_LowerCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cascadeClientClient) LowerSearch(ctx context.Context, in *ReqLowerSearch, opts ...grpc.CallOption) (*RespLowerSearch, error) {
	out := new(RespLowerSearch)
	err := c.cc.Invoke(ctx, CascadeClient_LowerSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cascadeClientClient) LowerUpdate(ctx context.Context, in *ReqLowerUpdate, opts ...grpc.CallOption) (*RespLowerUpdate, error) {
	out := new(RespLowerUpdate)
	err := c.cc.Invoke(ctx, CascadeClient_LowerUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cascadeClientClient) LowerDel(ctx context.Context, in *ReqLowerDel, opts ...grpc.CallOption) (*RespLowerDel, error) {
	out := new(RespLowerDel)
	err := c.cc.Invoke(ctx, CascadeClient_LowerDel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cascadeClientClient) LowerGetInfo(ctx context.Context, in *ReqLowerGetInfo, opts ...grpc.CallOption) (*RespLowerGetInfo, error) {
	out := new(RespLowerGetInfo)
	err := c.cc.Invoke(ctx, CascadeClient_LowerGetInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cascadeClientClient) SuperiorGet(ctx context.Context, in *ReqSuperiorGet, opts ...grpc.CallOption) (*RespSuperiorGet, error) {
	out := new(RespSuperiorGet)
	err := c.cc.Invoke(ctx, CascadeClient_SuperiorGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cascadeClientClient) SuperiorSet(ctx context.Context, in *ReqSuperiorSet, opts ...grpc.CallOption) (*RespSuperiorSet, error) {
	out := new(RespSuperiorSet)
	err := c.cc.Invoke(ctx, CascadeClient_SuperiorSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cascadeClientClient) SyncTime(ctx context.Context, in *ReqSyncTime, opts ...grpc.CallOption) (*RespSyncTime, error) {
	out := new(RespSyncTime)
	err := c.cc.Invoke(ctx, CascadeClient_SyncTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cascadeClientClient) HeartBeat(ctx context.Context, in *ReqHeartBeat, opts ...grpc.CallOption) (*RespHeartBeat, error) {
	out := new(RespHeartBeat)
	err := c.cc.Invoke(ctx, CascadeClient_HeartBeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cascadeClientClient) CallCreate(ctx context.Context, in *ReqCgwCallCreate, opts ...grpc.CallOption) (*RespCgwCallCreate, error) {
	out := new(RespCgwCallCreate)
	err := c.cc.Invoke(ctx, CascadeClient_CallCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cascadeClientClient) CallModify(ctx context.Context, in *ReqCgwCallModify, opts ...grpc.CallOption) (*RespCgwCallModify, error) {
	out := new(RespCgwCallModify)
	err := c.cc.Invoke(ctx, CascadeClient_CallModify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cascadeClientClient) CallDelete(ctx context.Context, in *ReqCgwCallDelete, opts ...grpc.CallOption) (*RespCgwCallDelete, error) {
	out := new(RespCgwCallDelete)
	err := c.cc.Invoke(ctx, CascadeClient_CallDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cascadeClientClient) CallGroupCall(ctx context.Context, in *ReqCgwCallGroupCall, opts ...grpc.CallOption) (*RespCgwCallGroupCall, error) {
	out := new(RespCgwCallGroupCall)
	err := c.cc.Invoke(ctx, CascadeClient_CallGroupCall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cascadeClientClient) CallSetMember(ctx context.Context, in *ReqCgwCallSetMember, opts ...grpc.CallOption) (*RespCgwCallSetMember, error) {
	out := new(RespCgwCallSetMember)
	err := c.cc.Invoke(ctx, CascadeClient_CallSetMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cascadeClientClient) CallHangupUser(ctx context.Context, in *ReqCgwCallHangupUser, opts ...grpc.CallOption) (*RespCgwCallHangupUser, error) {
	out := new(RespCgwCallHangupUser)
	err := c.cc.Invoke(ctx, CascadeClient_CallHangupUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CascadeClientServer is the server API for CascadeClient service.
// All implementations must embed UnimplementedCascadeClientServer
// for forward compatibility
type CascadeClientServer interface {
	// 上下级级联配置
	LowerCreate(context.Context, *ReqLowerCreate) (*RespLowerCreate, error)
	LowerSearch(context.Context, *ReqLowerSearch) (*RespLowerSearch, error)
	LowerUpdate(context.Context, *ReqLowerUpdate) (*RespLowerUpdate, error)
	LowerDel(context.Context, *ReqLowerDel) (*RespLowerDel, error)
	LowerGetInfo(context.Context, *ReqLowerGetInfo) (*RespLowerGetInfo, error)
	SuperiorGet(context.Context, *ReqSuperiorGet) (*RespSuperiorGet, error)
	SuperiorSet(context.Context, *ReqSuperiorSet) (*RespSuperiorSet, error)
	// 其它操作
	SyncTime(context.Context, *ReqSyncTime) (*RespSyncTime, error)
	HeartBeat(context.Context, *ReqHeartBeat) (*RespHeartBeat, error)
	// 网关操作
	CallCreate(context.Context, *ReqCgwCallCreate) (*RespCgwCallCreate, error)
	CallModify(context.Context, *ReqCgwCallModify) (*RespCgwCallModify, error)
	CallDelete(context.Context, *ReqCgwCallDelete) (*RespCgwCallDelete, error)
	CallGroupCall(context.Context, *ReqCgwCallGroupCall) (*RespCgwCallGroupCall, error)
	CallSetMember(context.Context, *ReqCgwCallSetMember) (*RespCgwCallSetMember, error)
	CallHangupUser(context.Context, *ReqCgwCallHangupUser) (*RespCgwCallHangupUser, error)
	mustEmbedUnimplementedCascadeClientServer()
}

// UnimplementedCascadeClientServer must be embedded to have forward compatible implementations.
type UnimplementedCascadeClientServer struct {
}

func (UnimplementedCascadeClientServer) LowerCreate(context.Context, *ReqLowerCreate) (*RespLowerCreate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LowerCreate not implemented")
}
func (UnimplementedCascadeClientServer) LowerSearch(context.Context, *ReqLowerSearch) (*RespLowerSearch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LowerSearch not implemented")
}
func (UnimplementedCascadeClientServer) LowerUpdate(context.Context, *ReqLowerUpdate) (*RespLowerUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LowerUpdate not implemented")
}
func (UnimplementedCascadeClientServer) LowerDel(context.Context, *ReqLowerDel) (*RespLowerDel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LowerDel not implemented")
}
func (UnimplementedCascadeClientServer) LowerGetInfo(context.Context, *ReqLowerGetInfo) (*RespLowerGetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LowerGetInfo not implemented")
}
func (UnimplementedCascadeClientServer) SuperiorGet(context.Context, *ReqSuperiorGet) (*RespSuperiorGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuperiorGet not implemented")
}
func (UnimplementedCascadeClientServer) SuperiorSet(context.Context, *ReqSuperiorSet) (*RespSuperiorSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuperiorSet not implemented")
}
func (UnimplementedCascadeClientServer) SyncTime(context.Context, *ReqSyncTime) (*RespSyncTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncTime not implemented")
}
func (UnimplementedCascadeClientServer) HeartBeat(context.Context, *ReqHeartBeat) (*RespHeartBeat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedCascadeClientServer) CallCreate(context.Context, *ReqCgwCallCreate) (*RespCgwCallCreate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallCreate not implemented")
}
func (UnimplementedCascadeClientServer) CallModify(context.Context, *ReqCgwCallModify) (*RespCgwCallModify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallModify not implemented")
}
func (UnimplementedCascadeClientServer) CallDelete(context.Context, *ReqCgwCallDelete) (*RespCgwCallDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallDelete not implemented")
}
func (UnimplementedCascadeClientServer) CallGroupCall(context.Context, *ReqCgwCallGroupCall) (*RespCgwCallGroupCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallGroupCall not implemented")
}
func (UnimplementedCascadeClientServer) CallSetMember(context.Context, *ReqCgwCallSetMember) (*RespCgwCallSetMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallSetMember not implemented")
}
func (UnimplementedCascadeClientServer) CallHangupUser(context.Context, *ReqCgwCallHangupUser) (*RespCgwCallHangupUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallHangupUser not implemented")
}
func (UnimplementedCascadeClientServer) mustEmbedUnimplementedCascadeClientServer() {}

// UnsafeCascadeClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CascadeClientServer will
// result in compilation errors.
type UnsafeCascadeClientServer interface {
	mustEmbedUnimplementedCascadeClientServer()
}

func RegisterCascadeClientServer(s grpc.ServiceRegistrar, srv CascadeClientServer) {
	s.RegisterService(&CascadeClient_ServiceDesc, srv)
}

func _CascadeClient_LowerCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLowerCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CascadeClientServer).LowerCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CascadeClient_LowerCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CascadeClientServer).LowerCreate(ctx, req.(*ReqLowerCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CascadeClient_LowerSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLowerSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CascadeClientServer).LowerSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CascadeClient_LowerSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CascadeClientServer).LowerSearch(ctx, req.(*ReqLowerSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _CascadeClient_LowerUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLowerUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CascadeClientServer).LowerUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CascadeClient_LowerUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CascadeClientServer).LowerUpdate(ctx, req.(*ReqLowerUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CascadeClient_LowerDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLowerDel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CascadeClientServer).LowerDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CascadeClient_LowerDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CascadeClientServer).LowerDel(ctx, req.(*ReqLowerDel))
	}
	return interceptor(ctx, in, info, handler)
}

func _CascadeClient_LowerGetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLowerGetInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CascadeClientServer).LowerGetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CascadeClient_LowerGetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CascadeClientServer).LowerGetInfo(ctx, req.(*ReqLowerGetInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CascadeClient_SuperiorGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSuperiorGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CascadeClientServer).SuperiorGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CascadeClient_SuperiorGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CascadeClientServer).SuperiorGet(ctx, req.(*ReqSuperiorGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _CascadeClient_SuperiorSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSuperiorSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CascadeClientServer).SuperiorSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CascadeClient_SuperiorSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CascadeClientServer).SuperiorSet(ctx, req.(*ReqSuperiorSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _CascadeClient_SyncTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSyncTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CascadeClientServer).SyncTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CascadeClient_SyncTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CascadeClientServer).SyncTime(ctx, req.(*ReqSyncTime))
	}
	return interceptor(ctx, in, info, handler)
}

func _CascadeClient_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHeartBeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CascadeClientServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CascadeClient_HeartBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CascadeClientServer).HeartBeat(ctx, req.(*ReqHeartBeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _CascadeClient_CallCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCgwCallCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CascadeClientServer).CallCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CascadeClient_CallCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CascadeClientServer).CallCreate(ctx, req.(*ReqCgwCallCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CascadeClient_CallModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCgwCallModify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CascadeClientServer).CallModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CascadeClient_CallModify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CascadeClientServer).CallModify(ctx, req.(*ReqCgwCallModify))
	}
	return interceptor(ctx, in, info, handler)
}

func _CascadeClient_CallDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCgwCallDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CascadeClientServer).CallDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CascadeClient_CallDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CascadeClientServer).CallDelete(ctx, req.(*ReqCgwCallDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _CascadeClient_CallGroupCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCgwCallGroupCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CascadeClientServer).CallGroupCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CascadeClient_CallGroupCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CascadeClientServer).CallGroupCall(ctx, req.(*ReqCgwCallGroupCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _CascadeClient_CallSetMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCgwCallSetMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CascadeClientServer).CallSetMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CascadeClient_CallSetMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CascadeClientServer).CallSetMember(ctx, req.(*ReqCgwCallSetMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _CascadeClient_CallHangupUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCgwCallHangupUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CascadeClientServer).CallHangupUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CascadeClient_CallHangupUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CascadeClientServer).CallHangupUser(ctx, req.(*ReqCgwCallHangupUser))
	}
	return interceptor(ctx, in, info, handler)
}

// CascadeClient_ServiceDesc is the grpc.ServiceDesc for CascadeClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CascadeClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cascade.CascadeClient",
	HandlerType: (*CascadeClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LowerCreate",
			Handler:    _CascadeClient_LowerCreate_Handler,
		},
		{
			MethodName: "LowerSearch",
			Handler:    _CascadeClient_LowerSearch_Handler,
		},
		{
			MethodName: "LowerUpdate",
			Handler:    _CascadeClient_LowerUpdate_Handler,
		},
		{
			MethodName: "LowerDel",
			Handler:    _CascadeClient_LowerDel_Handler,
		},
		{
			MethodName: "LowerGetInfo",
			Handler:    _CascadeClient_LowerGetInfo_Handler,
		},
		{
			MethodName: "SuperiorGet",
			Handler:    _CascadeClient_SuperiorGet_Handler,
		},
		{
			MethodName: "SuperiorSet",
			Handler:    _CascadeClient_SuperiorSet_Handler,
		},
		{
			MethodName: "SyncTime",
			Handler:    _CascadeClient_SyncTime_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _CascadeClient_HeartBeat_Handler,
		},
		{
			MethodName: "CallCreate",
			Handler:    _CascadeClient_CallCreate_Handler,
		},
		{
			MethodName: "CallModify",
			Handler:    _CascadeClient_CallModify_Handler,
		},
		{
			MethodName: "CallDelete",
			Handler:    _CascadeClient_CallDelete_Handler,
		},
		{
			MethodName: "CallGroupCall",
			Handler:    _CascadeClient_CallGroupCall_Handler,
		},
		{
			MethodName: "CallSetMember",
			Handler:    _CascadeClient_CallSetMember_Handler,
		},
		{
			MethodName: "CallHangupUser",
			Handler:    _CascadeClient_CallHangupUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cascade.rpcFlag",
}
